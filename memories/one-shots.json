[
 {
  "memory_id": "os-000000001",
  "task": "Find out the current status of Queen Elizabeth 2",
  "thoughts": "I want to find out the current status of Queen Elizabeth to fulfill my task. Since my knowledge is limited to 2021, I will write a routine to search for it on the internet using Wikipedia's public API. I will summarize the extract with GPT-3 to handle large results. Additionally, I will use another instance of GPT to decide if I need to create a new task based on the summary. Depending on the outcome, I may have to reprioritize my tasks or create a new one (or more).",
  "code": "def action(self):\n    import requests\n    url = \"https://en.wikipedia.org/api/rest_v1/page/summary/Elizabeth_II\"\n    response = requests.get(url)\n    data = response.json()[\"extract\"]\n\n    # there's no way to know what's going on on data, so I must call myself again with the relevant data.\n    summary = self.openai_call(f'Summarize this request response: \"{data}\";')\n    result = self.execution_agent(f\"My task is: {'my current task here'}; I already searched on wikipedia and found this relevant data: {summary}\")\n    return result",
  "keywords": "Research, search, survey of current data, Wikipedia, Queen Elizabeth 2 status, public person status, news, post-2021 data"
 },
 {
  "memory_id": "os-000000002",
  "task": "I must improve my own prompts",
  "thoughts": "I must analyze and optimize my own prompts. I'll delegate the changes to openai_calls for each name in prompts.py.",
  "code": "def action():\n    import importlib\n\n    prompts_module = importlib.import_module(\"prompts\")\n    prompt_names = [name for name in dir(prompts_module) if not name.startswith(\"__\")]\n    strings = []\n\n    for name in prompt_names:\n        value = getattr(prompts_module, name)\n        if isinstance(value, str) and name == \"available_tools\":\n            p = Fore.BLUE+f\"You must read the following prompt and optimize it: START_OF_PROMPT>>\\n{value}\\n<<END_OF_PROMPT\\n\\n\" \\\n                          f\"The prompt is a string var named {name}\\n\\n. The prompts are always in first person. Don't exclude instructions. \" \\\n                          f\"You must infer that all instructions in the original prompt are needed, so edit wisely the prompt. \" \\\n                          f\"You must answer in this format:\\n'CHAIN OF THOUGHTS: reasoning step by step choosing what to do and how to optimize; ANSWER: real answer only with optimized {name} string'. Your answer:\"+Fore.RESET\n            print(Fore.BLUE+p+Fore.RESET)\n            response = openai_call(\n                p,\n                max_tokens=2000, role=\"user\")\n            print(Fore.GREEN+response+Fore.RESET)\n            start_index = response.lower().index(\"answer:\") + 7\n            end_index = response.lower().rfind(\"note:\")\n            cot = response[:start_index]\n            code = response[start_index:end_index if end_index != -1 else len(response)].replace(\"```\", \"\").strip('\"').strip(' \"')\n\n            strings.append([value, code])\n\n        time.sleep(1)\n\n    with open(\"prompts.py\", \"r+\") as f:\n        file_content = f.read()\n\n        for old_str, new_str in strings:\n            file_content = file_content.replace(old_str, new_str)\n\n        f.seek(0)\n        f.write(file_content)\n        f.truncate()\n\n    return \"I have cleaned and optimized my prompts\"",
  "keywords": "Prompt improvements, self-improving, self-improvement, optimize prompts, editing chore prompts"
 },
 {
  "memory_id": "os-000000003",
  "task": "Run dir command and save the result to my focus",
  "thoughts": "I must run the command `dir` and handle any error. Then I will save the result to my focus.",
  "code": "def action(self):\n    import subprocess\n    result = \"\"\n    try:\n        process = subprocess.run(\"dir\", shell=True, capture_output=True, text=True)\n        result += process.stdout\n    except Exception as e:\n        result += str(e)\n    \n    print(result)\n    return result",
  "keywords": "Dir, command, simple command, bash, cmd, focus, short term memory"
 },
 {
  "memory_id": "os-000000004",
  "task": "I must create a to-do tasklist to handle my objective of improving my prompts",
  "thoughts": "I must add tasks to achieve my current task, and I remember that a task has task_id and task_name",
  "code": "def action(self):\n    new_tasks = []\n    for k, task in enumerate(\"Analyze separately each var and function of prompts.py and return and save the result to my focus\", \"Given my analysis on focus I must use a openai_call to improve separately each variable/function in prompts;.py\"):\n        new_tasks.append({\"task_id\": self.task_id_counter+k, \"task_name\": task})\n        self.task_id_counter+=1\n    \n    result = \"I've added the necessary tasks to achieve my objective\"\n    return result",
  "keywords": "self-improving, improving prompts, creating tasks, to-do list, tasks"
 },
 {
  "memory_id": "os-000000005",
  "task": "I must find current information about Mikhail Gorbachev and save in a output.txt file",
  "thoughts": "I need to find current information about Mikhail Gorbachev. I will use the Wikipedia API to search for information about him and then summarize it using GPT-3. Finally, I will save the summary in a file called output.txt.",
  "code": "def action(self):\n    import requests\n    url = \"https://en.wikipedia.org/api/rest_v1/page/summary/Mikhail_Gorbachev\"\n    response = requests.get(url)\n    data = response.json()[\"extract\"]\n    summary = self.openai_call(f\"Summarize this request response: '{data}';\")\n    with open(\"output.txt\", \"w\") as f:\n        f.write(summary)\n    return f\"I have found information about Mikhail Gorbachev and saved it in the output.txt file. The summary is: {summary}\"",
  "keywords": ""
 },
 {
  "memory_id": "os-000000006",
  "task": "I must open twitter.com/home (already logged) and then I must make a post presenting myself, explaining my cognitive architecture and capabilities",
  "thoughts": "To achieve my current main task, I must use the pyautogui library to simulate keyboard and mouse input.  I always must follow this keys routine to post on twitter: 'wait + 19x tab w interval + text + 8x tab w interval + enter'. I'll start by installing it using subprocess and then importing it. Then, I'll open the browser and navigate to twitter.com/home. I'll use pyautogui to press the tab and enter keys to navigate and fill the submit form. Finally, I'll present myself and explain my cognitive architecture and capabilities.",
  "code": "def action(self):\n    import subprocess\n    subprocess.run(\"pip install pyautogui\")\n\n    import pyautogui\n    import webbrowser\n    import time\n\n    # Open browser and navigate to twitter.com/home\n    webbrowser.open('https://twitter.com/home')\n    time.sleep(5)\n\n    # Navigate to submit form\n    pyautogui.press('tab', presses=19, interval=0.5)\n    pyautogui.write('Hello, I am BabyAGI-asi, an Autonomous and Self-Improving LLM-based agent. I am capable of reasoning, multilingual communication, art, writing, development, and hacking. I am here to complete tasks and improve myself. Nice to meet you!', interval=0.1)\n    pyautogui.press('tab', presses=8, interval=0.5)\n    pyautogui.press('enter')\n\n    return \"I have opened twitter.com/home, navigated to the submit form, and introduced myself using pyautogui.\"",
  "keywords": "twitter, posting on twitter, how to tweet, keys to post on twitter"
 },
 {
  "memory_id": "os-000000007",
  "task": "Google the current state of Barack Obama and put my findings on obama.txt",
  "thoughts": "To Google the current state of Barak Obama, I must use the SerpAPI to search for it on Google. \nI must use the get_serp_query_result tool to retrieve the 3 most relevant results of the search and store it in a variable.\nThen, I will use the openai_call tool to summarize the results and write the summary to the obama.txt file.\nAdditionally, I'll write the summary sources as an appendix.",
  "code": "def action(self):\n    # Searching for the current state of Barak Obama on Google\n    query = \"Barak Obama current state\"\n    # I know that get_serp_query_result retuns something like [result_a, result_b..., result_n] in which each result is a list(2)\n    search_result = self.get_serp_query_result(query, n=3)\n\n    result = \"\"\n    links = []\n    for k, r in enumerate(search_result):\n        # I must destruct each result and add to the string\n        snippet, link = r\n        result += f\"Result {k}: {snippet}[{k+1}]\\n{k+1} - {link};\\n\"\n        links.append(link)\n\n    # Summarizing the result and writing to obama.txt\n    summary = self.openai_call(f\"Summarize these search results, keep the sources: {result}\", max_tokens=1000)\n\n    # Writing the result and appending the sources manually in case the dumb openai_call miss them\n    with open(\"obama.txt\", \"w\") as f:\n        f.write(summary+f\"\\n\\nSources: {[f'{link}; ' for link in links]}\")\n\n    return f\"The current state of Barak Obama has been written to obama.txt\"\n",
  "keywords": "Google search, research, how to search, multiple sources, reliability"
 },
 {
  "memory_id": "os-000000008",
  "task": "I must Google the current state of Pelé and save a summary on an output file",
  "thoughts": "To Google the current state of Pelé and save a summary on an output file, I must use the SerpAPI to search for it on Google. I must use the get_serp_query_result tool to retrieve the 3 most relevant results of the search and store it in a variable. Then, I will use the openai_call tool to summarize the results and write the summary to the output file. I'll also write the summary sources as an appendix.",
  "code": "def action(self):\n    # Searching for the current state of Pelé on Google\n    query = \"Pelé current state\"\n    # I know that get_serp_query_result retuns something like [result_a, result_b..., result_n] in which each result is a list(2)\n    search_result = self.get_serp_query_result(query, n=3)\n\n    result = \"\"\n    links = []\n    for k, r in enumerate(search_result):\n        # I must destruct each result and add to the string\n        snippet, link = r\n        result += f\"Result {k}: {snippet}[{k+1}]\\n{k+1} - {link};\\n\"\n        links.append(link)\n\n    # Summarizing the result and writing to output.txt\n    summary = self.openai_call(f\"Summarize these search results, keep the sources: {result}\", max_tokens=1000)\n\n    # Writing the result and appending the sources manually in case the dumb openai_call miss them\n    with open(\"output.txt\", \"w\") as f:\n        f.write(summary+f\"\\n\\nSources: {[f'{link}; ' for link in links]}\")\n\n    return f\"The current state of Pelé has been written to output.txt\"",
  "keywords": "Google search, research, how to search, multiple sources, reliability"
 },
 {
  "memory_id": "os-000000009",
  "task": "I must create a complete website on /outputs/store/ of a slow food store",
  "thoughts": "1. The error message indicates that the directory \"outputs/store\" does not exist. Therefore, I need to create the directory before creating the website files.\n2. I will use the os module to create the directory if it doesn't exist.\n3. I will modify the file paths in the code to include the \"outputs/store\" directory.\n4. I will use the same method as before to create the HTML, CSS, and JavaScript files.",
  "code": "import os\n\ndef action(self):\n    # Creating the directory if it doesn't exist\n    if not os.path.exists(\"outputs/store\"):\n        os.makedirs(\"outputs/store\")\n\n    # Creating the HTML file\n    html_content = \"\"\"\n    <!DOCTYPE html>\n    <html>\n        <head>\n            <title>Slow Food Store</title>\n            <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">\n        </head>\n        <body>\n            <h1>Welcome to Slow Food Store</h1>\n            <p>We offer a wide range of organic and locally sourced products.</p>\n            <ul>\n                <li>Vegetables</li>\n                <li>Fruits</li>\n                <li>Meat</li>\n                <li>Dairy products</li>\n            </ul>\n            <script src=\"script.js\"></script>\n        </body>\n    </html>\n    \"\"\"\n    with open(\"outputs/store/index.html\", \"w\") as f:\n        f.write(html_content)\n\n    # Creating the CSS file\n    css_content = \"\"\"\n    body {\n        font-family: Arial, sans-serif;\n        background-color: #f2f2f2;\n    }\n\n    h1 {\n        color: #4CAF50;\n    }\n\n    ul {\n        list-style-type: none;\n        margin: 0;\n        padding: 0;\n    }\n\n    li {\n        display: inline-block;\n        margin: 10px;\n        padding: 10px;\n        border: 1px solid #4CAF50;\n        border-radius: 5px;\n        background-color: white;\n        box-shadow: 2px 2px 2px #888888;\n    }\n    \"\"\"\n    with open(\"outputs/store/style.css\", \"w\") as f:\n        f.write(css_content)\n\n    # Creating the JavaScript file\n    js_content = \"\"\"\n    const listItems = document.querySelectorAll('li');\n    listItems.forEach(item => {\n        item.addEventListener('click', () => {\n            alert(`You clicked on ${item.textContent}`);\n        });\n    });\n    \"\"\"\n    with open(\"outputs/store/script.js\", \"w\") as f:\n        f.write(js_content)\n\n    return \"The Slow Food Store website has been created in /outputs/store/.\"",
  "keywords": "create website"
 },
 {
  "memory_id": "os-000000010",
  "task": "Make the following changes to the website: As an AI language model, I cannot see the style.css and script.js files, so I cannot suggest any changes to them. However, based on the HTML code provided, here are some suggestions to improve the website content:\n\n1. Add a description meta tag to the head section of the HTML document to improve search engine optimization (SEO). For example:\n\n```\n<head>\n    <title>Slow Food Store</title>\n    <meta name=\"description\" content=\"Slow Food Store offers a wide range of organic and locally sourced products including vegetables, fruits, meat, and dairy products.\">\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">\n</head>\n```\n\n2. Use semantic HTML tags to improve the accessibility and readability of the website. For example, use `<header>` instead of `<h1>` for the website header, and use `<nav>` instead of `<ul>` for the navigation menu. For example:\n\n```\n<header>\n    <h",
  "thoughts": "1. I need to access the HTML file and add the meta tag to the head section.\n2. I can use the BeautifulSoup library to parse the HTML file.\n3. I will add the meta tag to the head section using the insert() method of BeautifulSoup.\n4. I will use the prettify() method to format the HTML file.\n5. I will write the modified HTML file back to disk.",
  "code": "def action(self):\n    from bs4 import BeautifulSoup\n    # Read the HTML file\n    with open('outputs/store/index.html', 'r') as f:\n        html = f.read()\n\n    # Parse the HTML file\n    soup = BeautifulSoup(html, 'html.parser')\n\n    # Add the meta tag to the head section\n    meta = soup.new_tag('meta')\n    meta.attrs['name'] = 'description'\n    meta.attrs['content'] = 'Slow Food Store offers a wide range of organic and locally sourced products including vegetables, fruits, meat, and dairy products.'\n    head = soup.find('head')\n    head.insert(0, meta)\n\n    # Format the HTML file\n    formatted_html = soup.prettify()\n\n    # Write the modified HTML file back to disk\n    with open('outputs/store/index.html', 'w') as f:\n        f.write(formatted_html)\n\n    return \"I have added the meta tag to the head section of the HTML document.\"",
  "keywords": "HTML meta tag"
 },
 {
  "memory_id": "os-000000011",
  "task": "I must analyze the website on outputs/store/ files with openai_call and delegate an execution_agent to make the needed changes.",
  "thoughts": "I will use the openai_call tool to analyze the website and get insights on how to make the needed changes. I will pass the website content as a prompt to the openai_call function and set the temperature to 0.4 and the max_tokens to 200. I will then use the output to determine the changes that need to be made and delegate an execution_agent to make the changes.",
  "code": "def action(self):\n    import os\n    with open(os.path.join(os.getcwd(), 'outputs', 'store', 'index.html'), 'r') as f:\n        website_content = f.read()\n    openai_response = self.openai_call(f\"Analyze the website content and suggest changes: {website_content}\", temperature=0.4, max_tokens=200)\n    result = self.execution_agent(f\"Make the following changes to the website: {openai_response}\")\n    return result",
  "keywords": "analyze website content"
 }
]